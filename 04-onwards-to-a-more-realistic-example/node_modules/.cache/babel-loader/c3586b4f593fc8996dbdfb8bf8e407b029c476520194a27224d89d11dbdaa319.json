{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method,\n        headers: requestConfig.headers,\n        body: JSON.stringify(requestConfig.body)\n      });\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n      const data = await response.json();\n      applyData(data);\n      // const loadedTasks = [];\n\n      // for (const taskKey in data) {\n      //   loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n      // }\n\n      // setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  };\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\nexport default useHttp;","map":{"version":3,"names":["useState","useHttp","requestConfig","applyData","_s","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["/home/user1/Documents/GitHub/React_Maxmillian_Prac_projects/04-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useHttp =(requestConfig,applyData)=>{\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n  \n    const sendRequest = async (taskText) => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(\n          requestConfig.url,{\n            method:requestConfig.method,\n            headers:requestConfig.headers,\n            body:JSON.stringify(requestConfig.body)\n          }\n        );\n  \n        if (!response.ok) {\n          throw new Error('Request failed!');\n        }\n  \n        const data = await response.json();\n  \n        applyData(data)\n        // const loadedTasks = [];\n  \n        // for (const taskKey in data) {\n        //   loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n        // }\n  \n        // setTasks(loadedTasks);\n      } catch (err) {\n        setError(err.message || 'Something went wrong!');\n      }\n      setIsLoading(false);\n    };\n  return{\n    isLoading:isLoading,\n    error:error,\n    sendRequest:sendRequest\n  }\n}\nexport default useHttp"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAEA,CAACC,aAAa,EAACC,SAAS,KAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtCJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BV,aAAa,CAACW,GAAG,EAAC;QAChBC,MAAM,EAACZ,aAAa,CAACY,MAAM;QAC3BC,OAAO,EAACb,aAAa,CAACa,OAAO;QAC7BC,IAAI,EAACC,IAAI,CAACC,SAAS,CAAChB,aAAa,CAACc,IAAI;MACxC,CAAC,CACF;MAED,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MAElCnB,SAAS,CAACkB,IAAI,CAAC;MACf;;MAEA;MACA;MACA;;MAEA;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAlB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EACH,OAAM;IACJD,SAAS,EAACA,SAAS;IACnBE,KAAK,EAACA,KAAK;IACXE,WAAW,EAACA;EACd,CAAC;AACH,CAAC;AAAAL,EAAA,CAxCKH,OAAO;AAyCb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}